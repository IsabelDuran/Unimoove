/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package unimoove.api;

import unimoove.api.dto.PlaceCategoryChangeRequest;
import unimoove.api.dto.PlaceCreationRequest;
import unimoove.api.dto.PlaceIdChangeRequest;
import unimoove.api.dto.PlaceNameChangeRequest;
import unimoove.api.dto.PlaceResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-03-13T23:33:47.450+01:00[Europe/Madrid]")
@Api(value = "places", description = "the places API")
public interface PlacesApi {

    Logger log = LoggerFactory.getLogger(PlacesApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Adds a place", nickname = "addPlace", notes = "Adds a place to the system", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Places", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Place created"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing place already exists"),
        @ApiResponse(code = 401, message = "The requested page needs a username and a password") })
    @RequestMapping(value = "/places",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> addPlace(@ApiParam(value = "Place to add"  )  @Valid @RequestBody PlaceCreationRequest body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PlacesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Deletes a place", nickname = "deletePLace", notes = "", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Places", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "user deleted succesfully"),
        @ApiResponse(code = 400, message = "bad input parameter"),
        @ApiResponse(code = 404, message = "user not found"),
        @ApiResponse(code = 403, message = "Access denied") })
    @RequestMapping(value = "/places/{idPlace}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deletePLace(@ApiParam(value = "By passing in the appropriate place ID, you can delete the place.",required=true) @PathVariable("idPlace") String idPlace
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PlacesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Finds a place", nickname = "getPlace", notes = "", response = PlaceResponse.class, authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Places", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = PlaceResponse.class),
        @ApiResponse(code = 400, message = "bad input parameter"),
        @ApiResponse(code = 404, message = "place not found"),
        @ApiResponse(code = 403, message = "Access denied"),
        @ApiResponse(code = 401, message = "The requested page needs a username and a password") })
    @RequestMapping(value = "/places/{idPlace}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<PlaceResponse> getPlace(@ApiParam(value = "By passing in the appropriate place ID, you can get the place.",required=true) @PathVariable("idPlace") String idPlace
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"name\" : \"Puerto Real\",\n  \"category\" : 0\n}", PlaceResponse.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PlacesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Modifies the place's category", nickname = "modifyPlaceCategory", notes = "The place ID for the place you want to modify", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Places", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "bad input parameter"),
        @ApiResponse(code = 200, message = "operation completed successfully"),
        @ApiResponse(code = 403, message = "Access denied"),
        @ApiResponse(code = 401, message = "The requested page needs a username and a password") })
    @RequestMapping(value = "/places/{idPlace}/category",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> modifyPlaceCategory(@ApiParam(value = "",required=true) @PathVariable("idPlace") String idPlace
,@ApiParam(value = "The place's new category"  )  @Valid @RequestBody PlaceCategoryChangeRequest body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PlacesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Modifies the place's ID", nickname = "modifyPlaceId", notes = "The place ID for the place you want to modify", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Places", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "bad input parameter"),
        @ApiResponse(code = 200, message = "operation completed successfully"),
        @ApiResponse(code = 403, message = "Access denied"),
        @ApiResponse(code = 401, message = "The requested page needs a username and a password") })
    @RequestMapping(value = "/places/{idPlace}/idPlace",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> modifyPlaceId(@ApiParam(value = "",required=true) @PathVariable("idPlace") String idPlace
,@ApiParam(value = "The place's new ID"  )  @Valid @RequestBody PlaceIdChangeRequest body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PlacesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Modifies the places's name", nickname = "modifyPlaceName", notes = "The place ID for the place you want to modify", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Places", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "bad input parameter"),
        @ApiResponse(code = 200, message = "operation completed successfully"),
        @ApiResponse(code = 403, message = "Access denied"),
        @ApiResponse(code = 401, message = "The requested page needs a username and a password") })
    @RequestMapping(value = "/places/{idPlace}/name",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> modifyPlaceName(@ApiParam(value = "",required=true) @PathVariable("idPlace") String idPlace
,@ApiParam(value = "The place's new name"  )  @Valid @RequestBody PlaceNameChangeRequest body
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PlacesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Searches for a place", nickname = "searchPlace", notes = "Searches for a place.", response = PlaceResponse.class, responseContainer = "List", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Places", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The search was successfull", response = PlaceResponse.class, responseContainer = "List"),
        @ApiResponse(code = 403, message = "Access denied"),
        @ApiResponse(code = 401, message = "The requested page needs a username and a password"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/places",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<PlaceResponse>> searchPlace(@ApiParam(value = "the place to be searched") @Valid @RequestParam(value = "name", required = false) String name
) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\n  \"name\" : \"Puerto Real\",\n  \"category\" : 0\n}, {\n  \"name\" : \"Puerto Real\",\n  \"category\" : 0\n} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default PlacesApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
