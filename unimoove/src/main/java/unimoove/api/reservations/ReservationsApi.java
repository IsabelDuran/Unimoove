/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package unimoove.api.reservations;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import unimoove.reservations.FullTripException;

@Api(value = "reservations", description = "the reservations API")
public interface ReservationsApi {

    Logger log = LoggerFactory.getLogger(ReservationsApi.class);

    @ApiOperation(value = "Adds a reservation", nickname = "addReservation", notes = "Adds a new reservation to the system", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Reservations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Reservation created"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 401, message = "The requested page needs a username and a password") })
    @RequestMapping(value = "/reservations",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addReservation(@ApiParam(value = "Reservation to add"  )  @Valid @RequestBody ReservationCreationRequest body
) throws FullTripException;


    @ApiOperation(value = "Deletes a reservation", nickname = "deleteReservation", notes = "", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "Reservations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "reservation deleted succesfully"),
        @ApiResponse(code = 400, message = "bad input parameter"),
        @ApiResponse(code = 404, message = "reservation not found"),
        @ApiResponse(code = 401, message = "The requested page needs a username and a password") })
    @RequestMapping(value = "/reservations/{idReservation}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteReservation(@ApiParam(value = "By passing in the appropriate reservation ID, you can delete the reservation.",required=true) @PathVariable("idReservation") Long idReservation
);
    
    @ApiOperation(value = "Modifies the reservation's state", nickname = "modifyReservationState", notes = "The reservation ID for the reservation you want to modify", authorizations = {
			@Authorization(value = "ApiKeyAuth") }, tags = { "Reservations", })
	@ApiResponses(value = { @ApiResponse(code = 400, message = "bad input parameter"),
			@ApiResponse(code = 200, message = "operation completed successfully"),
			@ApiResponse(code = 401, message = "The requested page needs a username and a password") })
	@RequestMapping(value = "/reservations/{idReservation}/state", consumes = {
			"application/json" }, method = RequestMethod.PUT)
	ResponseEntity<Void> modifyReservationStatus(
			@ApiParam(value = "", required = true) @PathVariable("idReservation") Long idReservation,
			@ApiParam(value = "The reservation's new status") @Valid @RequestBody ReservationStateChangeRequest body);

}
